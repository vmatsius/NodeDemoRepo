03/25 - last lecture on NodeJS and briefing on project
03/30 - last QandA session
03/31 - basic review, small presentation
04/02 - presentation (based on which feedback provided to spok)

Module1
-----------
npm init -> creates package.json in your folder
npm init will create all metadata, dependencies etc

npm install 	-> installs all dependencies from package.json
		ex: "npm install chalk --save"	
		chalk is a package
"install -globally" 	- any folder with node code on the machine can use

npm root -g  	-> to find out where things are globally installed

console - pre-built object
there are other bre-build(pre-installed) modules,like os, ...

"require" - gives access to in-build module and can import other modules (like "import" statement):
var os=require('os')
import {platform, arch} from 'os'  //"import" can be used only inside module

node modules are like JREs

npm install nodemon -g 	-> nodemon monitors changes and implements them on the fly (like watch)
then call it: "nodemon filename"   (ex: nodemon first.js)

Acquiring passed args:
arguments are stored in process.argv
 -in terminal: node cmd.js one two three four
 -in file we have:
console.log('Hello world')
console.log(process.argv)
console.log(process.argv.slice(2))
 -output:
Hello world
[
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Node\\module1\\classPractice\\cmd.js',
  'one',
  'two',
  'three',
  'four'
]
[ 'one', 'two', 'three', 'four' ]

Read article about modules in Node.js:
https://pencilflip.medium.com/using-es-modules-with-commonjs-modules-in-node-js-1015786dab03#:~:text=You%20can%20only%20use%20import%20and%20export%20in%20an%20ES%20module.&text=You%20cannot%20use%20require%20in,to%20load%20an%20ES%20module.

Module2
-----------
to be able to create server:
npm install express --save

pm2 start <filename>

